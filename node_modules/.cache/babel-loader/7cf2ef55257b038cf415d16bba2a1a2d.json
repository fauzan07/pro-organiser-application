{"ast":null,"code":"var _jsxFileName = \"/home/wws/Desktop/pro-organiser-application/src/components/card/Card.js\";\nimport React, { useState, useEffect } from \"react\";\nimport style from \"./Card.module.css\";\nimport Modal from './../../common/Modal/Modal';\nimport Axios from \"axios\";\n\nfunction Card(props) {\n  const [showModal, setShowModal] = useState(false);\n  const {\n    members,\n    columnId,\n    boardId,\n    boardTitle,\n    isCardDragged\n  } = props;\n  const [cardData, setCardData] = useState(\"\");\n  const [formComplete, setFormComplete] = useState(false);\n  const [formIncompleteError, setFormIncompleteError] = useState(false);\n  const AddCard = React.useRef();\n  useEffect(() => {\n    // modalOpenHandler();\n    getCardData();\n  }, [showModal]); // const modalOpenHandler = () => {\n  //   let colBox = document.getElementById(\"AddCardBox\");\n  //   colBox.addEventListener(\"click\", () => {\n  //     setShowModal(true);\n  //   });\n  // };\n\n  const getCardData = () => {\n    Axios.get(`https://pro-organiser-app.firebaseio.com/boardContents/${boardId}/column/${columnId}/card.json`).then(response => {\n      setCardData(response.data);\n    }).catch(error => console.log(error));\n  }; // const handleAddCardClick = (event) => {\n  //   event.preventDefault();\n  //       if(AddCard.current.value.length === 0){\n  //         setFormComplete(false);\n  //         setFormIncompleteError(true);\n  //   } else {\n  //     // add column name in firebase\n  //     Axios.post(`https://pro-organiser-app.firebaseio.com/boardContents/${props.boardId}/column.json`, {\n  //       name: cardTitle,\n  //     })\n  //       .then((response) => {\n  //         alert(\"column added succesfully\");\n  //         props.setShowColumn(true);\n  //       })\n  //       .catch((err) => console.log(err));\n  //     setShowModal(false);\n  //   }\n  // };\n\n\n  const modalCloseHandler = () => {\n    setShowModal(false);\n  }; // let modalContent = showModal ? \n  // (\n  //     <>\n  //     {formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding Column</p> : null}\n  //     <div className={style.AddCardForm}>\n  //       <h2>Add a Column</h2>\n  //      <div className={style.FormInput}><span className={style.Lable}>Enter a column name:</span><input type=\"text\" id=\"column_name\" value={cardTitle} placeholder=\"Enter a column name\" ref={AddCard} onChange={(e) => {e.preventDefault(); setColumnName(e.target.value);}}/></div>\n  //     </div>\n  //     <button className={style.AddButton} id=\"CreateColumn\" disabled={formComplete} onClick={handleAddCardClick}>Add Column</button>\n  //     </>\n  // )\n  // :null;\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.CardData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, cardData && Object.entries(cardData).map(item => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.CardName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, item[1].cardTitle), /*#__PURE__*/React.createElement(\"div\", {\n    className: style.AddCardBox,\n    id: \"AddCardBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, \"Add a Card\"))))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Card;","map":{"version":3,"sources":["/home/wws/Desktop/pro-organiser-application/src/components/card/Card.js"],"names":["React","useState","useEffect","style","Modal","Axios","Card","props","showModal","setShowModal","members","columnId","boardId","boardTitle","isCardDragged","cardData","setCardData","formComplete","setFormComplete","formIncompleteError","setFormIncompleteError","AddCard","useRef","getCardData","get","then","response","data","catch","error","console","log","modalCloseHandler","CardData","Object","entries","map","item","CardName","cardTitle","AddCardBox"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAES,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA,OAArB;AAA8BC,IAAAA,UAA9B;AAA0CC,IAAAA;AAA1C,MAA4DP,KAAlE;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACgB,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACkB,mBAAD,EAAsBC,sBAAtB,IAAgDnB,QAAQ,CAAC,KAAD,CAA9D;AAEA,QAAMoB,OAAO,GAAGrB,KAAK,CAACsB,MAAN,EAAhB;AAEApB,EAAAA,SAAS,CAAC,MAAM;AACd;AACAqB,IAAAA,WAAW;AACZ,GAHQ,EAGN,CAACf,SAAD,CAHM,CAAT,CATmB,CAcnB;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMe,WAAW,GAAG,MAAM;AACxBlB,IAAAA,KAAK,CACJmB,GADD,CACM,0DAAyDZ,OAAQ,WAAUD,QAAS,YAD1F,EAECc,IAFD,CAEOC,QAAD,IAAc;AAChBV,MAAAA,WAAW,CAACU,QAAQ,CAACC,IAAV,CAAX;AACH,KAJD,EAKCC,KALD,CAKQC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CALlB;AAMH,GAPC,CArBmB,CA8BnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAGA,QAAOG,iBAAiB,GAAG,MAAM;AAACvB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAAoB,GAAtD,CAnDmB,CAqDnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAEN,KAAK,CAAC8B,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACClB,QAAQ,IACPmB,MAAM,CAACC,OAAP,CAAepB,QAAf,EAAyBqB,GAAzB,CAA8BC,IAAD,iBAC3B,uDACA;AAAK,IAAA,SAAS,EAAElC,KAAK,CAACmC,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCD,IAAI,CAAC,CAAD,CAAJ,CAAQE,SAAzC,CADA,eAEA;AAAK,IAAA,SAAS,EAAEpC,KAAK,CAACqC,UAAtB;AAAkC,IAAA,EAAE,EAAC,YAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CAFA,CADF,CAFF,CADF,eAYI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZJ,CADF;AAuBD;;AAED,eAAelC,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport style from \"./Card.module.css\";\nimport Modal from './../../common/Modal/Modal';\nimport Axios from \"axios\";\n\nfunction Card(props) {\n  const [showModal, setShowModal] = useState(false);\n  const { members, columnId, boardId, boardTitle, isCardDragged } = props;\n  const [cardData, setCardData] = useState(\"\");\n  const [formComplete, setFormComplete] = useState(false);\n  const [formIncompleteError, setFormIncompleteError] = useState(false);\n\n  const AddCard = React.useRef();\n\n  useEffect(() => {\n    // modalOpenHandler();\n    getCardData();\n  }, [showModal]);\n\n  // const modalOpenHandler = () => {\n  //   let colBox = document.getElementById(\"AddCardBox\");\n  //   colBox.addEventListener(\"click\", () => {\n  //     setShowModal(true);\n  //   });\n  // };\n\n  const getCardData = () => {\n    Axios\n    .get(`https://pro-organiser-app.firebaseio.com/boardContents/${boardId}/column/${columnId}/card.json`)\n    .then((response) => {\n        setCardData(response.data);\n    })\n    .catch((error) => console.log(error));\n};\n\n  // const handleAddCardClick = (event) => {\n  //   event.preventDefault();\n  //       if(AddCard.current.value.length === 0){\n  //         setFormComplete(false);\n  //         setFormIncompleteError(true);\n  //   } else {\n  //     // add column name in firebase\n  //     Axios.post(`https://pro-organiser-app.firebaseio.com/boardContents/${props.boardId}/column.json`, {\n  //       name: cardTitle,\n  //     })\n  //       .then((response) => {\n  //         alert(\"column added succesfully\");\n  //         props.setShowColumn(true);\n  //       })\n  //       .catch((err) => console.log(err));\n\n  //     setShowModal(false);\n  //   }\n  // };\n\n\n  const  modalCloseHandler = () => {setShowModal(false)};\n\n  // let modalContent = showModal ? \n\n  // (\n  //     <>\n  //     {formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding Column</p> : null}\n  //     <div className={style.AddCardForm}>\n  //       <h2>Add a Column</h2>\n  //      <div className={style.FormInput}><span className={style.Lable}>Enter a column name:</span><input type=\"text\" id=\"column_name\" value={cardTitle} placeholder=\"Enter a column name\" ref={AddCard} onChange={(e) => {e.preventDefault(); setColumnName(e.target.value);}}/></div>\n  //     </div>\n  //     <button className={style.AddButton} id=\"CreateColumn\" disabled={formComplete} onClick={handleAddCardClick}>Add Column</button>\n  //     </>\n  // )\n  // :null;\n\n  return (\n    <div>\n      <div className={style.CardData}>\n      {cardData &&\n        Object.entries(cardData).map((item) => (\n          <>\n          <div className={style.CardName}>{item[1].cardTitle}</div>\n          <div className={style.AddCardBox} id=\"AddCardBox\">\n            <button>Add a Card</button>\n          </div>\n          </>\n         ) )}\n      </div>\n        <br />\n        {/* {showModal && (\n        \n            <Modal  \n                content = {modalContent}\n                close = {modalCloseHandler}/> \n        )} */}\n       \n    </div>\n)\n}\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}
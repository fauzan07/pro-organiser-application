{"ast":null,"code":"var _jsxFileName = \"/home/wws/Desktop/pro-organiser-application/src/components/card/Card.js\";\nimport React, { useState, useEffect } from \"react\";\nimport style from \"./Card.module.css\";\nimport Modal from './../../common/Modal/Modal';\nimport Axios from \"axios\";\n\nfunction Card(props) {\n  const [showModal, setShowModal] = useState(false);\n  const {\n    members,\n    columnId,\n    boardId,\n    boardTitle,\n    isCardDragged\n  } = props;\n  const [cardData, setCardData] = useState(\"\");\n  const [isCardAdded, setIsCardAdded] = useState(false);\n  const [isCardDelete, setIsCardDelete] = useState(false);\n  const [isCardEdited, setIsCardEdited] = useState(false);\n  const [cardTitle, setCardTitle] = useState(\"\");\n  const [team, setTeam] = useState([]);\n  const [descrptn, setDescrptn] = useState(\"\");\n  const [dueDate, setDueDate] = useState(\"\");\n  const [formComplete, setFormComplete] = useState(false);\n  const [formIncompleteError, setFormIncompleteError] = useState(false); // to split members list string into array\n\n  const memberArr = members.split(\",\");\n  const cardNames = React.useRef();\n  const teamDetails = React.useRef();\n  const descrpDetails = React.useRef();\n  const datesDetails = React.useRef(); // to get today's date iin yyyy-mm-dd format\n\n  var today = new Date();\n  var month,\n      day = null;\n\n  if (today.getMonth() < 10 || today.getDate() < 10) {\n    month = \"0\" + (today.getMonth() + 1);\n    day = \"0\" + today.getDate();\n  }\n\n  var date = today.getFullYear() + \"-\" + month + \"-\" + day;\n  useEffect(() => {\n    setIsCardAdded(false);\n    setIsCardDelete(false);\n    setIsCardEdited(false);\n    getCardData();\n  }, [isCardAdded, isCardDragged, isCardDelete, isCardEdited]);\n\n  const getCardData = () => {\n    Axios.get(`https://pro-organiser-app.firebaseio.com/boardContents/${boardId}/column/${columnId}/card.json`).then(response => {\n      setCardData(response.data);\n    }).catch(error => console.log(error));\n  }; //  to handle add card modal click\n\n\n  const handleAddCardClick = e => {\n    //   check if all input is taken\n    if (cardNames.current.value.length === 0 || teamDetails.current.value.length === 0 || descrpDetails.current.value.length === 0 || datesDetails.current.value.length === 0) {\n      setFormComplete(false);\n      setFormIncompleteError(true);\n    } else {\n      // if user wants to edit then put request is used\n      if (editDetails) {\n        Axios.put(`https://pro-organiser-app.firebaseio.com/boardContents/${boardId}/column/${columnId}/card/${cardId}.json`, {\n          cardTitle: cardTitle === \"\" ? cardName : cardTitle,\n          team: team.length === 0 ? teamDetail : team,\n          descrptn: descrptn === \"\" ? descDetails : descrptn,\n          dueDate: dueDate === \"\" ? dateDetails : dueDate\n        }).then(res => {\n          alert(\"card edited succesfully\");\n          setIsCardEdited(true);\n        }).catch(err => console.log(\"Error in editDetails\" + err));\n      } //  if user wants to add a new card\n      else {\n          Axios.post(`https://pro-organiser-app.firebaseio.com/boardContents${boardId}/column/${columnId}/card.json`, {\n            cardTitle: cardTitle,\n            team: team,\n            descrptn: descrptn,\n            dueDate: dueDate\n          }).then(res => {\n            alert(\"card added succesfully\"); // call new card\n            // getCardData();\n\n            setIsCardAdded(true);\n          }).catch(err => console.log(\"Error\" + err));\n        }\n\n      setShowModal(false);\n      setEditDetails(false);\n      setCardTitle(\"\");\n      setTeam([]);\n      setDescrptn(\"\");\n      setDueDate(\"\");\n    }\n  };\n\n  const onSelectChange = e => {\n    const values = [...e.target.selectedOptions].map(opt => opt.value);\n    setTeam(values);\n  };\n\n  const modalCloseHandler = () => {\n    setShowModal(false);\n  };\n\n  let modalContent = showModal ? /*#__PURE__*/React.createElement(React.Fragment, null, formIncompleteError ? /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 30\n    }\n  }, \"Kindly complete the form before adding Card\") : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.AddCardForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, \"Add a Card\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: style.FormInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: style.Lable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 41\n    }\n  }, \"Enter a title for your task:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"title\",\n    defaultValue: editDetails ? cardName : \"\",\n    placeholder: \"e.g. Add a new icon\",\n    ref: cardNames,\n    onChange: e => setCardTitle(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 106\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: style.FormInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: style.Lable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 41\n    }\n  }, \"Choose members for this task(select multiple,if needed):\"), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"membersList\",\n    name: \"membersList\",\n    defaultValue: editDetails ? teamDetail : \"\",\n    multiple: true,\n    ref: teamDetails,\n    onChange: onSelectChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 134\n    }\n  }, memberArr.map(item => /*#__PURE__*/React.createElement(\"option\", {\n    value: item,\n    key: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 303\n    }\n  }, item)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: style.FormInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: style.Lable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 41\n    }\n  }, \"Add the description for your task:\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"description\",\n    type: \"text\",\n    defaultValue: editDetails ? descDetails : \"\",\n    placeholder: \"Add your description here\",\n    ref: descrpDetails,\n    onChange: e => setDescrptn(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 112\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: style.FormInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: style.Lable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 41\n    }\n  }, \"Select the due-date for this task:\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"due_date\",\n    type: \"date\",\n    min: date,\n    defaultValue: editDetails ? dateDetails : \"\",\n    ref: datesDetails,\n    onChange: e => setDueDate(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 112\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    className: style.AddButton,\n    id: \"CreateColumn\",\n    disabled: formComplete,\n    onClick: handleAddCardClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, \"Add Column\")) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.CardData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, cardData && Object.entries(cardData).map(item => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.CardInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.CardHeader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.CardName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, item[1].cardTitle)), /*#__PURE__*/React.createElement(\"div\", {\n    className: style.CardIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 16\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: style.CardBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: style.AddCardBtn,\n    onClick: () => setShowModal(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, \"Add a Card\"))))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }), showModal && /*#__PURE__*/React.createElement(Modal, {\n    content: modalContent,\n    close: modalCloseHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Card;","map":{"version":3,"sources":["/home/wws/Desktop/pro-organiser-application/src/components/card/Card.js"],"names":["React","useState","useEffect","style","Modal","Axios","Card","props","showModal","setShowModal","members","columnId","boardId","boardTitle","isCardDragged","cardData","setCardData","isCardAdded","setIsCardAdded","isCardDelete","setIsCardDelete","isCardEdited","setIsCardEdited","cardTitle","setCardTitle","team","setTeam","descrptn","setDescrptn","dueDate","setDueDate","formComplete","setFormComplete","formIncompleteError","setFormIncompleteError","memberArr","split","cardNames","useRef","teamDetails","descrpDetails","datesDetails","today","Date","month","day","getMonth","getDate","date","getFullYear","getCardData","get","then","response","data","catch","error","console","log","handleAddCardClick","e","current","value","length","editDetails","put","cardId","cardName","teamDetail","descDetails","dateDetails","res","alert","err","post","setEditDetails","onSelectChange","values","target","selectedOptions","map","opt","modalCloseHandler","modalContent","color","AddCardForm","FormInput","Lable","item","AddButton","CardData","Object","entries","CardInfo","CardHeader","CardName","CardIcon","CardBtn","AddCardBtn"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAES,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA,OAArB;AAA8BC,IAAAA,UAA9B;AAA0CC,IAAAA;AAA1C,MAA4DP,KAAlE;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM,CAACgB,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACkB,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACoB,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,CAAC,KAAD,CAAhD;AAEA,QAAM,CAACsB,SAAD,EAAYC,YAAZ,IAA4BvB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACwB,IAAD,EAAOC,OAAP,IAAkBzB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAAC0B,QAAD,EAAWC,WAAX,IAA0B3B,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAAC4B,OAAD,EAAUC,UAAV,IAAwB7B,QAAQ,CAAC,EAAD,CAAtC;AAEA,QAAM,CAAC8B,YAAD,EAAeC,eAAf,IAAkC/B,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACgC,mBAAD,EAAsBC,sBAAtB,IAAgDjC,QAAQ,CAAC,KAAD,CAA9D,CAfmB,CAiBnB;;AACA,QAAMkC,SAAS,GAAGzB,OAAO,CAAC0B,KAAR,CAAc,GAAd,CAAlB;AAEA,QAAMC,SAAS,GAAGrC,KAAK,CAACsC,MAAN,EAAlB;AACA,QAAMC,WAAW,GAAGvC,KAAK,CAACsC,MAAN,EAApB;AACA,QAAME,aAAa,GAAGxC,KAAK,CAACsC,MAAN,EAAtB;AACA,QAAMG,YAAY,GAAGzC,KAAK,CAACsC,MAAN,EAArB,CAvBmB,CAyBjB;;AACA,MAAII,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,MAAIC,KAAJ;AAAA,MACEC,GAAG,GAAG,IADR;;AAEA,MAAIH,KAAK,CAACI,QAAN,KAAmB,EAAnB,IAAyBJ,KAAK,CAACK,OAAN,KAAkB,EAA/C,EAAmD;AACjDH,IAAAA,KAAK,GAAG,OAAOF,KAAK,CAACI,QAAN,KAAmB,CAA1B,CAAR;AACAD,IAAAA,GAAG,GAAG,MAAMH,KAAK,CAACK,OAAN,EAAZ;AACD;;AACD,MAAIC,IAAI,GAAGN,KAAK,CAACO,WAAN,KAAsB,GAAtB,GAA4BL,KAA5B,GAAoC,GAApC,GAA0CC,GAArD;AAEA3C,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAE,IAAAA,eAAe,CAAC,KAAD,CAAf;AACAE,IAAAA,eAAe,CAAC,KAAD,CAAf;AACA4B,IAAAA,WAAW;AACZ,GALQ,EAKN,CAACjC,WAAD,EAAcH,aAAd,EAA6BK,YAA7B,EAA2CE,YAA3C,CALM,CAAT;;AAQF,QAAM6B,WAAW,GAAG,MAAM;AACxB7C,IAAAA,KAAK,CACJ8C,GADD,CACM,0DAAyDvC,OAAQ,WAAUD,QAAS,YAD1F,EAECyC,IAFD,CAEOC,QAAD,IAAc;AAChBrC,MAAAA,WAAW,CAACqC,QAAQ,CAACC,IAAV,CAAX;AACH,KAJD,EAKCC,KALD,CAKQC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CALlB;AAMH,GAPC,CA3CmB,CAqDnB;;;AACA,QAAMG,kBAAkB,GAAIC,CAAD,IAAO;AAChC;AACA,QAAGvB,SAAS,CAACwB,OAAV,CAAkBC,KAAlB,CAAwBC,MAAxB,KAAmC,CAAnC,IAAwCxB,WAAW,CAACsB,OAAZ,CAAoBC,KAApB,CAA0BC,MAA1B,KAAqC,CAA7E,IAAkFvB,aAAa,CAACqB,OAAd,CAAsBC,KAAtB,CAA4BC,MAA5B,KAAuC,CAAzH,IAA8HtB,YAAY,CAACoB,OAAb,CAAqBC,KAArB,CAA2BC,MAA3B,KAAsC,CAAvK,EAAyK;AACvK/B,MAAAA,eAAe,CAAC,KAAD,CAAf;AACAE,MAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACD,KAHD,MAGO;AACL;AACA,UAAI8B,WAAJ,EAAiB;AACf3D,QAAAA,KAAK,CACJ4D,GADD,CACM,0DAAyDrD,OAAQ,WAAUD,QAAS,SAAQuD,MAAO,OADzG,EAEE;AACE3C,UAAAA,SAAS,EAAEA,SAAS,KAAK,EAAd,GAAmB4C,QAAnB,GAA8B5C,SAD3C;AAEEE,UAAAA,IAAI,EAAEA,IAAI,CAACsC,MAAL,KAAgB,CAAhB,GAAoBK,UAApB,GAAiC3C,IAFzC;AAGEE,UAAAA,QAAQ,EAAEA,QAAQ,KAAK,EAAb,GAAkB0C,WAAlB,GAAgC1C,QAH5C;AAIEE,UAAAA,OAAO,EAAEA,OAAO,KAAK,EAAZ,GAAiByC,WAAjB,GAA+BzC;AAJ1C,SAFF,EASGuB,IATH,CASSmB,GAAD,IAAS;AACbC,UAAAA,KAAK,CAAC,yBAAD,CAAL;AACAlD,UAAAA,eAAe,CAAC,IAAD,CAAf;AACD,SAZH,EAaGiC,KAbH,CAaUkB,GAAD,IAAShB,OAAO,CAACC,GAAR,CAAY,yBAAyBe,GAArC,CAblB;AAcD,OAfD,CAgBA;AAhBA,WAiBK;AACHpE,UAAAA,KAAK,CACJqE,IADD,CACO,yDAAwD9D,OAAQ,WAAUD,QAAS,YAD1F,EAEE;AACEY,YAAAA,SAAS,EAAEA,SADb;AAEEE,YAAAA,IAAI,EAAEA,IAFR;AAGEE,YAAAA,QAAQ,EAAEA,QAHZ;AAIEE,YAAAA,OAAO,EAAEA;AAJX,WAFF,EASGuB,IATH,CASSmB,GAAD,IAAS;AACbC,YAAAA,KAAK,CAAC,wBAAD,CAAL,CADa,CAEb;AACA;;AACAtD,YAAAA,cAAc,CAAC,IAAD,CAAd;AACD,WAdH,EAeGqC,KAfH,CAeUkB,GAAD,IAAShB,OAAO,CAACC,GAAR,CAAY,UAAUe,GAAtB,CAflB;AAgBD;;AAEDhE,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAkE,MAAAA,cAAc,CAAC,KAAD,CAAd;AAEAnD,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACAE,MAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,MAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,MAAAA,UAAU,CAAC,EAAD,CAAV;AACD;AACF,GAnDD;;AAqDA,QAAM8C,cAAc,GAAIhB,CAAD,IAAO;AAC5B,UAAMiB,MAAM,GAAG,CAAC,GAAGjB,CAAC,CAACkB,MAAF,CAASC,eAAb,EAA8BC,GAA9B,CAAmCC,GAAD,IAASA,GAAG,CAACnB,KAA/C,CAAf;AACApC,IAAAA,OAAO,CAACmD,MAAD,CAAP;AACD,GAHD;;AAKA,QAAOK,iBAAiB,GAAG,MAAM;AAACzE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAAoB,GAAtD;;AAEA,MAAI0E,YAAY,GAAG3E,SAAS,gBAGxB,0CACCyB,mBAAmB,gBAAG;AAAG,IAAA,KAAK,EAAE;AAACmD,MAAAA,KAAK,EAAG;AAAT,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAAH,GAAgF,IADpG,eAEA;AAAK,IAAA,SAAS,EAAEjF,KAAK,CAACkF,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEC;AAAK,IAAA,SAAS,EAAElF,KAAK,CAACmF,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiC;AAAM,IAAA,SAAS,EAAEnF,KAAK,CAACoF,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAAjC,eAAkG;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,EAAE,EAAC,OAAtB;AAA8B,IAAA,YAAY,EAAEvB,WAAW,GAAGG,QAAH,GAAc,EAArE;AAAyE,IAAA,WAAW,EAAC,qBAArF;AAA2G,IAAA,GAAG,EAAE9B,SAAhH;AAA2H,IAAA,QAAQ,EAAGuB,CAAD,IAAOpC,YAAY,CAACoC,CAAC,CAACkB,MAAF,CAAShB,KAAV,CAAxJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAlG,CAFD,eAGC;AAAK,IAAA,SAAS,EAAE3D,KAAK,CAACmF,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiC;AAAM,IAAA,SAAS,EAAEnF,KAAK,CAACoF,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEAAjC,eAA8H;AAAS,IAAA,EAAE,EAAC,aAAZ;AAA0B,IAAA,IAAI,EAAC,aAA/B;AAA6C,IAAA,YAAY,EAAEvB,WAAW,GAAGI,UAAH,GAAgB,EAAtF;AAA0F,IAAA,QAAQ,MAAlG;AAAmG,IAAA,GAAG,EAAE7B,WAAxG;AAAqH,IAAA,QAAQ,EAAEqC,cAA/H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgJzC,SAAS,CAAC6C,GAAV,CAAeQ,IAAD,iBAAW;AAAQ,IAAA,KAAK,EAAEA,IAAf;AAAqB,IAAA,GAAG,EAAEA,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCA,IAAjC,CAAzB,CAAhJ,CAA9H,CAHD,eAIC;AAAK,IAAA,SAAS,EAAErF,KAAK,CAACmF,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiC;AAAM,IAAA,SAAS,EAAEnF,KAAK,CAACoF,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAjC,eAAwG;AAAO,IAAA,EAAE,EAAC,aAAV;AAAwB,IAAA,IAAI,EAAC,MAA7B;AAAqC,IAAA,YAAY,EAAEvB,WAAW,GAAGK,WAAH,GAAiB,EAA/E;AAAmF,IAAA,WAAW,EAAC,2BAA/F;AAA2H,IAAA,GAAG,EAAE7B,aAAhI;AAAgJ,IAAA,QAAQ,EAAGoB,CAAD,IAAOhC,WAAW,CAACgC,CAAC,CAACkB,MAAF,CAAShB,KAAV,CAA5K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAxG,CAJD,eAKC;AAAK,IAAA,SAAS,EAAE3D,KAAK,CAACmF,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiC;AAAM,IAAA,SAAS,EAAEnF,KAAK,CAACoF,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAjC,eAAwG;AAAO,IAAA,EAAE,EAAC,UAAV;AAAqB,IAAA,IAAI,EAAC,MAA1B;AAAiC,IAAA,GAAG,EAAEvC,IAAtC;AAA4C,IAAA,YAAY,EAAEgB,WAAW,GAAGM,WAAH,GAAiB,EAAtF;AAA0F,IAAA,GAAG,EAAE7B,YAA/F;AAA6G,IAAA,QAAQ,EAAGmB,CAAD,IAAO9B,UAAU,CAAC8B,CAAC,CAACkB,MAAF,CAAShB,KAAV,CAAxI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAxG,CALD,CAFA,eASA;AAAQ,IAAA,SAAS,EAAE3D,KAAK,CAACsF,SAAzB;AAAoC,IAAA,EAAE,EAAC,cAAvC;AAAsD,IAAA,QAAQ,EAAE1D,YAAhE;AAA8E,IAAA,OAAO,EAAE4B,kBAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBATA,CAHwB,GAe3B,IAfD;AAiBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAExD,KAAK,CAACuF,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC3E,QAAQ,IACP4E,MAAM,CAACC,OAAP,CAAe7E,QAAf,EAAyBiE,GAAzB,CAA8BQ,IAAD,iBAC3B,uDACA;AAAK,IAAA,SAAS,EAAErF,KAAK,CAAC0F,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAK,IAAA,SAAS,EAAE1F,KAAK,CAAC2F,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAK,IAAA,SAAS,EAAE3F,KAAK,CAAC4F,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCP,IAAI,CAAC,CAAD,CAAJ,CAAQjE,SAAzC,CADA,CADA,eAIA;AAAK,IAAA,SAAS,EAAEpB,KAAK,CAAC6F,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAK;AAAG,IAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,CADA,CAJA,CADA,eASA;AAAK,IAAA,SAAS,EAAE7F,KAAK,CAAC8F,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,SAAS,EAAE9F,KAAK,CAAC+F,UAAzB;AAAqC,IAAA,OAAO,EAAE,MAAMzF,YAAY,CAAC,IAAD,CAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CATA,CADF,CAFF,CADF,eAmBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBJ,EAoBKD,SAAS,iBAEN,oBAAC,KAAD;AACI,IAAA,OAAO,EAAI2E,YADf;AAEI,IAAA,KAAK,EAAID,iBAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBR,CADF;AA8BD;;AAED,eAAe5E,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport style from \"./Card.module.css\";\nimport Modal from './../../common/Modal/Modal';\nimport Axios from \"axios\";\n\nfunction Card(props) {\n  const [showModal, setShowModal] = useState(false);\n  const { members, columnId, boardId, boardTitle, isCardDragged } = props;\n  const [cardData, setCardData] = useState(\"\");\n\n  const [isCardAdded, setIsCardAdded] = useState(false);\n  const [isCardDelete, setIsCardDelete] = useState(false);\n  const [isCardEdited, setIsCardEdited] = useState(false);\n\n  const [cardTitle, setCardTitle] = useState(\"\");\n  const [team, setTeam] = useState([]);\n  const [descrptn, setDescrptn] = useState(\"\");\n  const [dueDate, setDueDate] = useState(\"\");\n\n  const [formComplete, setFormComplete] = useState(false);\n  const [formIncompleteError, setFormIncompleteError] = useState(false);\n\n  // to split members list string into array\n  const memberArr = members.split(\",\");\n\n  const cardNames = React.useRef();\n  const teamDetails = React.useRef();\n  const descrpDetails = React.useRef();\n  const datesDetails = React.useRef();\n\n    // to get today's date iin yyyy-mm-dd format\n    var today = new Date();\n    var month,\n      day = null;\n    if (today.getMonth() < 10 || today.getDate() < 10) {\n      month = \"0\" + (today.getMonth() + 1);\n      day = \"0\" + today.getDate();\n    }\n    var date = today.getFullYear() + \"-\" + month + \"-\" + day;\n\n    useEffect(() => {\n      setIsCardAdded(false);\n      setIsCardDelete(false);\n      setIsCardEdited(false);\n      getCardData();\n    }, [isCardAdded, isCardDragged, isCardDelete, isCardEdited]);\n\n\n  const getCardData = () => {\n    Axios\n    .get(`https://pro-organiser-app.firebaseio.com/boardContents/${boardId}/column/${columnId}/card.json`)\n    .then((response) => {\n        setCardData(response.data);\n    })\n    .catch((error) => console.log(error));\n};\n\n  \n  //  to handle add card modal click\n  const handleAddCardClick = (e) => {\n    //   check if all input is taken\n    if(cardNames.current.value.length === 0 || teamDetails.current.value.length === 0 || descrpDetails.current.value.length === 0 || datesDetails.current.value.length === 0){\n      setFormComplete(false);\n      setFormIncompleteError(true);\n    } else {\n      // if user wants to edit then put request is used\n      if (editDetails) {\n        Axios\n        .put(`https://pro-organiser-app.firebaseio.com/boardContents/${boardId}/column/${columnId}/card/${cardId}.json`,\n          {\n            cardTitle: cardTitle === \"\" ? cardName : cardTitle,\n            team: team.length === 0 ? teamDetail : team,\n            descrptn: descrptn === \"\" ? descDetails : descrptn,\n            dueDate: dueDate === \"\" ? dateDetails : dueDate,\n          }\n        )\n          .then((res) => {\n            alert(\"card edited succesfully\");\n            setIsCardEdited(true);\n          })\n          .catch((err) => console.log(\"Error in editDetails\" + err));\n      }\n      //  if user wants to add a new card\n      else {\n        Axios\n        .post(`https://pro-organiser-app.firebaseio.com/boardContents${boardId}/column/${columnId}/card.json`,\n          {\n            cardTitle: cardTitle,\n            team: team,\n            descrptn: descrptn,\n            dueDate: dueDate,\n          }\n        )\n          .then((res) => {\n            alert(\"card added succesfully\");\n            // call new card\n            // getCardData();\n            setIsCardAdded(true);\n          })\n          .catch((err) => console.log(\"Error\" + err));\n      }\n\n      setShowModal(false);\n      setEditDetails(false);\n\n      setCardTitle(\"\");\n      setTeam([]);\n      setDescrptn(\"\");\n      setDueDate(\"\");\n    }\n  };\n\n  const onSelectChange = (e) => {\n    const values = [...e.target.selectedOptions].map((opt) => opt.value);\n    setTeam(values);\n  };\n\n  const  modalCloseHandler = () => {setShowModal(false)};\n\n  let modalContent = showModal ? \n\n  (\n      <>\n      {formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding Card</p> : null}\n      <div className={style.AddCardForm}>\n        <h2>Add a Card</h2>\n       <div className={style.FormInput}><span className={style.Lable}>Enter a title for your task:</span><input type=\"text\" id=\"title\" defaultValue={editDetails ? cardName : \"\"} placeholder=\"e.g. Add a new icon\" ref={cardNames} onChange={(e) => setCardTitle(e.target.value)}/></div>\n       <div className={style.FormInput}><span className={style.Lable}>Choose members for this task(select multiple,if needed):</span><select  id=\"membersList\" name=\"membersList\" defaultValue={editDetails ? teamDetail : \"\"} multiple ref={teamDetails} onChange={onSelectChange}>{memberArr.map((item) => (<option value={item} key={item}>{item}</option>))}</select></div>\n       <div className={style.FormInput}><span className={style.Lable}>Add the description for your task:</span><input id=\"description\" type=\"text\"  defaultValue={editDetails ? descDetails : \"\"} placeholder=\"Add your description here\" ref={descrpDetails}  onChange={(e) => setDescrptn(e.target.value)}/></div>\n       <div className={style.FormInput}><span className={style.Lable}>Select the due-date for this task:</span><input id=\"due_date\" type=\"date\" min={date} defaultValue={editDetails ? dateDetails : \"\"} ref={datesDetails} onChange={(e) => setDueDate(e.target.value)}/></div>\n      </div>\n      <button className={style.AddButton} id=\"CreateColumn\" disabled={formComplete} onClick={handleAddCardClick}>Add Column</button>\n      </>\n  )\n  :null;\n\n  return (\n    <div>\n      <div className={style.CardData}>\n      {cardData &&\n        Object.entries(cardData).map((item) => (\n          <>\n          <div className={style.CardInfo}>\n          <div className={style.CardHeader}>\n          <div className={style.CardName}>{item[1].cardTitle}</div>\n          </div>\n          <div className={style.CardIcon}>\n          <div><i className=\"fas fa-list\"></i></div>\n          </div>\n          </div>\n          <div className={style.CardBtn}>\n            <button className={style.AddCardBtn} onClick={() => setShowModal(true)}>Add a Card</button>\n          </div>\n          </>\n         ) )}\n      </div>\n        <br />\n        {showModal && (\n        \n            <Modal  \n                content = {modalContent}\n                close = {modalCloseHandler}/> \n        )}\n       \n    </div>\n)\n}\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/wws/Desktop/pro-organiser-application/src/components/addColumn/AddColumn.js\";\nimport React, { useState, useEffect } from \"react\";\nimport style from \"./AddColumn.module.css\";\nimport Modal from './../../common/Modal/Modal';\nimport Axios from \"axios\";\n\nfunction AddColumn(props) {\n  const [showModal, setShowModal] = useState(false);\n  const [columnName, setColumnName] = useState(\"\");\n  const [formComplete, setFormComplete] = useState(false);\n  const [formIncompleteError, setFormIncompleteError] = useState(false);\n  const AddColumn = React.useRef();\n  useEffect(() => {\n    modalOpenHandler();\n  }, [showModal]);\n\n  const modalOpenHandler = () => {\n    let colBox = document.getElementById(\"addColumnBox\");\n    colBox.addEventListener(\"click\", () => {\n      setShowModal(true);\n    });\n  };\n\n  const handleAddColumnClick = event => {\n    event.preventDefault();\n\n    if (AddColumn.current.value.length === 0) {\n      setFormComplete(false);\n      setFormIncompleteError(true);\n    } else {\n      // add column name in firebase\n      let columnName = { ...columnName\n      };\n      columnName.column = AddColumn.current.value;\n      Axios.post(`https://pro-organizer-c3f1c.firebaseio.com/boardContents/${props.boardId}/column.json`, columnName).then(response => {\n        alert(\"column added succesfully\"); // props.getColumnData();\n\n        props.setShowColumn(true);\n      }).catch(err => console.log(err));\n      setShowModal(false);\n    }\n  }; // console.log(showModal);\n  // return (\n  //   <>\n  //     <div className={styles.addColumnBox} id=\"addColumnBox\">\n  //       <div>Add a Column</div>\n  //     </div>\n  //     <br />\n  //     {showModal && (\n  //       <Modal flag={\"addColumn\"}>\n  //         <button\n  //           type=\"button\"\n  //           className=\"close\"\n  //           data-dismiss=\"modal\"\n  //           style={{ width: \"5%\" }}\n  //           onClick={() => setShowModal(false)}\n  //         >\n  //           &times;\n  //         </button>\n  //         <h5 >Add column</h5>\n  //         <br />\n  //         <div >\n  //           <label htmlFor=\"column_name\">Enter a column name:</label>\n  //           <input\n  //             id=\"column_name\"\n  //             type=\"text\"\n  //             value={columnName}\n  //             // className={modalStyles.inputBox}\n  //             onChange={(e) => {\n  //               e.preventDefault();\n  //               setColumnName(e.target.value);\n  //             }}\n  //           ></input>\n  //           <br />\n  //           <br />\n  //         </div>\n  //         <br />\n  //         <button\n  //           className=\"btn btn-primary\"\n  //           id=\"CreateColumn\"\n  //           onClick={handleAddColumnClick}\n  //         >\n  //           Add Column\n  //         </button>\n  //         <br />\n  //         <br />\n  //         <div id=\"inputError\"></div>\n  //       </Modal>\n  //     )}\n  //   </>\n  // );\n\n\n  const modalCloseHandler = () => {\n    setShowModal(false);\n  };\n\n  let modalContent = showModal ? /*#__PURE__*/React.createElement(React.Fragment, null, formIncompleteError ? /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 30\n    }\n  }, \"Kindly complete the form before adding Column\") : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.AddColumnForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, \"Add Column\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: style.FormInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: style.Lable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 41\n    }\n  }, \"Enter a column name:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter a column name\",\n    ref: AddColumn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 98\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    className: style.AddButton,\n    disabled: formComplete,\n    onClick: handleAddColumnClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, \"Add\")) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.addColumBox,\n    id: \"addColumnBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, \"Add a Columns\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }), showModal && /*#__PURE__*/React.createElement(Modal, {\n    content: modalContent,\n    close: modalCloseHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default AddColumn;","map":{"version":3,"sources":["/home/wws/Desktop/pro-organiser-application/src/components/addColumn/AddColumn.js"],"names":["React","useState","useEffect","style","Modal","Axios","AddColumn","props","showModal","setShowModal","columnName","setColumnName","formComplete","setFormComplete","formIncompleteError","setFormIncompleteError","useRef","modalOpenHandler","colBox","document","getElementById","addEventListener","handleAddColumnClick","event","preventDefault","current","value","length","column","post","boardId","then","response","alert","setShowColumn","catch","err","console","log","modalCloseHandler","modalContent","color","AddColumnForm","FormInput","Lable","AddButton","addColumBox"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport style from \"./AddColumn.module.css\";\nimport Modal from './../../common/Modal/Modal';\nimport Axios from \"axios\";\n\nfunction AddColumn(props) {\n  const [showModal, setShowModal] = useState(false);\n  const [columnName, setColumnName] = useState(\"\");\n  const [formComplete, setFormComplete] = useState(false);\n  const [formIncompleteError, setFormIncompleteError] = useState(false);\n\n  const AddColumn = React.useRef();\n\n  useEffect(() => {\n    modalOpenHandler();\n  }, [showModal]);\n\n  const modalOpenHandler = () => {\n    let colBox = document.getElementById(\"addColumnBox\");\n    colBox.addEventListener(\"click\", () => {\n      setShowModal(true);\n    });\n  };\n\n  const handleAddColumnClick = (event) => {\n    event.preventDefault();\n        if(AddColumn.current.value.length === 0){\n          setFormComplete(false);\n          setFormIncompleteError(true);\n    } else {\n      // add column name in firebase\n      let columnName = {...columnName}\n      columnName.column = AddColumn.current.value;\n      Axios.post(`https://pro-organizer-c3f1c.firebaseio.com/boardContents/${props.boardId}/column.json`,columnName)\n        .then((response) => {\n          alert(\"column added succesfully\");\n          // props.getColumnData();\n          props.setShowColumn(true);\n        })\n        .catch((err) => console.log(err));\n\n      setShowModal(false);\n    }\n  };\n  // console.log(showModal);\n  // return (\n  //   <>\n  //     <div className={styles.addColumnBox} id=\"addColumnBox\">\n  //       <div>Add a Column</div>\n  //     </div>\n  //     <br />\n  //     {showModal && (\n  //       <Modal flag={\"addColumn\"}>\n  //         <button\n  //           type=\"button\"\n  //           className=\"close\"\n  //           data-dismiss=\"modal\"\n  //           style={{ width: \"5%\" }}\n  //           onClick={() => setShowModal(false)}\n  //         >\n  //           &times;\n  //         </button>\n  //         <h5 >Add column</h5>\n  //         <br />\n  //         <div >\n  //           <label htmlFor=\"column_name\">Enter a column name:</label>\n  //           <input\n  //             id=\"column_name\"\n  //             type=\"text\"\n  //             value={columnName}\n  //             // className={modalStyles.inputBox}\n  //             onChange={(e) => {\n  //               e.preventDefault();\n  //               setColumnName(e.target.value);\n  //             }}\n  //           ></input>\n  //           <br />\n  //           <br />\n  //         </div>\n  //         <br />\n  //         <button\n  //           className=\"btn btn-primary\"\n  //           id=\"CreateColumn\"\n  //           onClick={handleAddColumnClick}\n  //         >\n  //           Add Column\n  //         </button>\n  //         <br />\n  //         <br />\n  //         <div id=\"inputError\"></div>\n  //       </Modal>\n  //     )}\n  //   </>\n  // );\n  \n\n  const  modalCloseHandler = () => {setShowModal(false)};\n\n  let modalContent = showModal ? \n\n  (\n      <>\n      {formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding Column</p> : null}\n      <div className={style.AddColumnForm}>\n        <p>Add Column</p>\n       <div className={style.FormInput}><span className={style.Lable}>Enter a column name:</span><input type=\"text\" placeholder=\"Enter a column name\" ref={AddColumn}/></div>\n      </div>\n      <button className={style.AddButton} disabled={formComplete} onClick={handleAddColumnClick}>Add</button>\n      </>\n  )\n  :null;\n\n  return (\n    <div>\n       <div className={style.addColumBox} id=\"addColumnBox\">\n        <div>Add a Columns</div>\n      </div>\n        <br />\n        {showModal && (\n        \n            <Modal  \n                content = {modalContent}\n                close = {modalCloseHandler}/> \n        )}\n       \n    </div>\n)\n}\n\nexport default AddColumn;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/wws/Desktop/pro-organiser-application/src/components/card/Card.js\";\nimport React, { useState, useEffect } from \"react\";\nimport style from \"./Card.module.css\";\nimport Modal from './../../common/Modal/Modal';\nimport Axios from \"axios\";\n\nfunction Card(props) {\n  const [showModal, setShowModal] = useState(false);\n  const [cardData, setCardData] = useState(\"\");\n  const [formComplete, setFormComplete] = useState(false);\n  const [formIncompleteError, setFormIncompleteError] = useState(false);\n  const AddCard = React.useRef();\n  useEffect(() => {\n    modalOpenHandler();\n    getCardData();\n  }, [showModal]);\n\n  const modalOpenHandler = () => {\n    let colBox = document.getElementById(\"AddCardBox\");\n    colBox.addEventListener(\"click\", () => {\n      setShowModal(true);\n    });\n  };\n\n  const getCardData = () => {\n    Axios.get(`https://pro-organiser-app.firebaseio.com/boardContents/${boardId}/column/${columnId}/card.json`).then(response => {\n      setTimeout(setCardData(response.data), 5000);\n      setLoading(false);\n    }).catch(error => console.log(error));\n  };\n\n  const handleAddCardClick = event => {\n    event.preventDefault();\n\n    if (AddCard.current.value.length === 0) {\n      setFormComplete(false);\n      setFormIncompleteError(true);\n    } else {\n      // add column name in firebase\n      Axios.post(`https://pro-organiser-app.firebaseio.com/boardContents/${props.boardId}/column.json`, {\n        name: columnName\n      }).then(response => {\n        alert(\"column added succesfully\");\n        props.setShowColumn(true);\n      }).catch(err => console.log(err));\n      setShowModal(false);\n    }\n  };\n\n  const modalCloseHandler = () => {\n    setShowModal(false);\n  };\n\n  let modalContent = showModal ? /*#__PURE__*/React.createElement(React.Fragment, null, formIncompleteError ? /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 30\n    }\n  }, \"Kindly complete the form before adding Column\") : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.AddCardForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, \"Add a Column\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: style.FormInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: style.Lable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 41\n    }\n  }, \"Enter a column name:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"column_name\",\n    value: columnName,\n    placeholder: \"Enter a column name\",\n    ref: AddCard,\n    onChange: e => {\n      e.preventDefault();\n      setColumnName(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 98\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    className: style.AddButton,\n    id: \"CreateColumn\",\n    disabled: formComplete,\n    onClick: handleAddCardClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, \"Add Column\")) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.CardData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, columnData && Object.entries(cardData).map(item => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: CardName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, item[1].cardTitle), /*#__PURE__*/React.createElement(\"div\", {\n    className: style.AddCardBox,\n    id: \"AddCardBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, \"Add a Card\"))))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }), showModal && /*#__PURE__*/React.createElement(Modal, {\n    content: modalContent,\n    close: modalCloseHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Card;","map":{"version":3,"sources":["/home/wws/Desktop/pro-organiser-application/src/components/card/Card.js"],"names":["React","useState","useEffect","style","Modal","Axios","Card","props","showModal","setShowModal","cardData","setCardData","formComplete","setFormComplete","formIncompleteError","setFormIncompleteError","AddCard","useRef","modalOpenHandler","getCardData","colBox","document","getElementById","addEventListener","get","boardId","columnId","then","response","setTimeout","data","setLoading","catch","error","console","log","handleAddCardClick","event","preventDefault","current","value","length","post","name","columnName","alert","setShowColumn","err","modalCloseHandler","modalContent","color","AddCardForm","FormInput","Lable","e","setColumnName","target","AddButton","CardData","columnData","Object","entries","map","item","CardName","cardTitle","AddCardBox"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport style from \"./Card.module.css\";\nimport Modal from './../../common/Modal/Modal';\nimport Axios from \"axios\";\n\nfunction Card(props) {\n  const [showModal, setShowModal] = useState(false);\n  const [cardData, setCardData] = useState(\"\");\n  const [formComplete, setFormComplete] = useState(false);\n  const [formIncompleteError, setFormIncompleteError] = useState(false);\n\n  const AddCard = React.useRef();\n\n  useEffect(() => {\n    modalOpenHandler();\n    getCardData();\n  }, [showModal]);\n\n  const modalOpenHandler = () => {\n    let colBox = document.getElementById(\"AddCardBox\");\n    colBox.addEventListener(\"click\", () => {\n      setShowModal(true);\n    });\n  };\n\n  const getCardData = () => {\n    Axios\n    .get(`https://pro-organiser-app.firebaseio.com/boardContents/${boardId}/column/${columnId}/card.json`)\n    .then((response) => {\n        setTimeout(setCardData(response.data), 5000);\n      setLoading(false);\n    })\n    .catch((error) => console.log(error));\n};\n\n  const handleAddCardClick = (event) => {\n    event.preventDefault();\n        if(AddCard.current.value.length === 0){\n          setFormComplete(false);\n          setFormIncompleteError(true);\n    } else {\n      // add column name in firebase\n      Axios.post(`https://pro-organiser-app.firebaseio.com/boardContents/${props.boardId}/column.json`, {\n        name: columnName,\n      })\n        .then((response) => {\n          alert(\"column added succesfully\");\n          props.setShowColumn(true);\n        })\n        .catch((err) => console.log(err));\n\n      setShowModal(false);\n    }\n  };\n\n\n  const  modalCloseHandler = () => {setShowModal(false)};\n\n  let modalContent = showModal ? \n\n  (\n      <>\n      {formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding Column</p> : null}\n      <div className={style.AddCardForm}>\n        <h2>Add a Column</h2>\n       <div className={style.FormInput}><span className={style.Lable}>Enter a column name:</span><input type=\"text\" id=\"column_name\" value={columnName} placeholder=\"Enter a column name\" ref={AddCard} onChange={(e) => {e.preventDefault(); setColumnName(e.target.value);}}/></div>\n      </div>\n      <button className={style.AddButton} id=\"CreateColumn\" disabled={formComplete} onClick={handleAddCardClick}>Add Column</button>\n      </>\n  )\n  :null;\n\n  return (\n    <div>\n      <div className={style.CardData}>\n      {columnData &&\n        Object.entries(cardData).map((item) => (\n          <>\n          <div className={CardName}>{item[1].cardTitle}</div>\n          <div className={style.AddCardBox} id=\"AddCardBox\">\n            <button>Add a Card</button>\n          </div>\n          </>\n         ) )}\n      </div>\n        <br />\n        {showModal && (\n        \n            <Modal  \n                content = {modalContent}\n                close = {modalCloseHandler}/> \n        )}\n       \n    </div>\n)\n}\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}
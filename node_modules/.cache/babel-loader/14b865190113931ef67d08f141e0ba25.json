{"ast":null,"code":"import _slicedToArray from\"/home/wws/pro-organiser-application/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useContext}from'react';import Axios from'axios';import style from'./CreateBoard.module.css';import{AuthContext}from'../../context/Auth';import{withRouter,useHistory}from\"react-router-dom\";var CreateBoard=function CreateBoard(props){var _useContext=useContext(AuthContext),currentUser=_useContext.currentUser;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),formComplete=_useState2[0],setFormComplete=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),formIncompleteError=_useState4[0],setFormIncompleteError=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isBoardAdded=_useState6[0],setIsBoardAdded=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),nameOfboards=_useState8[0],setNameOfboards=_useState8[1];var _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),teamMembers=_useState10[0],setTeamMembers=_useState10[1];var _useState11=useState(\"\"),_useState12=_slicedToArray(_useState11,2),typeOfBoards=_useState12[0],setTypeOfBoards=_useState12[1];var NameOfboard=React.useRef();var TeamMember=React.useRef();var TypeOfBoard=React.useRef();var userId=currentUser.uid;// to use history function\nvar history=useHistory();useEffect(function(){setIsBoardAdded(false);},[isBoardAdded]);var addBoardToDBHandler=function addBoardToDBHandler(event){event.preventDefault();if(NameOfboard.current.value.length===0||TeamMember.current.value.length===0||TypeOfBoard.current.value.length===0){setFormComplete(false);setFormIncompleteError(true);}else{// add column name in firebase\nAxios.post(\"https://pro-organiser-app.firebaseio.com/\".concat(userId,\"/boardContents.json\"),{boardName:nameOfboards,boardType:typeOfBoards,members:teamMembers}).then(function(response){alert(\"Board added succesfully\");history.push(\"/\");setIsBoardAdded(true);}).catch(function(error){return console.log(error);});}};return/*#__PURE__*/React.createElement(\"div\",{className:style.CreateMain},formIncompleteError?/*#__PURE__*/React.createElement(\"p\",{style:{color:'red'}},\"Kindly complete the form before adding the Board\"):null,/*#__PURE__*/React.createElement(\"div\",{className:style.CreateTitle},/*#__PURE__*/React.createElement(\"span\",null,\"Create a Board\")),/*#__PURE__*/React.createElement(\"form\",{onSubmit:addBoardToDBHandler},/*#__PURE__*/React.createElement(\"label\",null,/*#__PURE__*/React.createElement(\"div\",{className:style.Createlable},\"Enter a name of your board:\"),/*#__PURE__*/React.createElement(\"input\",{id:\"name\",type:\"text\",name:\"name\",placeholder:\"eg Agile Sprint Board\",ref:NameOfboard,onChange:function onChange(event){return setNameOfboards(event.target.value);}})),/*#__PURE__*/React.createElement(\"label\",null,/*#__PURE__*/React.createElement(\"div\",{className:style.Createlable},\"Add your team members:\"),/*#__PURE__*/React.createElement(\"input\",{id:\"team\",type:\"text\",name:\"team\",placeholder:\"Add your team (separated by commas)\",ref:TeamMember,onChange:function onChange(event){return setTeamMembers(event.target.value);}})),/*#__PURE__*/React.createElement(\"label\",null,/*#__PURE__*/React.createElement(\"div\",{className:style.Createlable},\"Enter the type of your board:\"),/*#__PURE__*/React.createElement(\"input\",{id:\"type\",type:\"text\",name:\"type\",placeholder:\"eg Design UX\",ref:TypeOfBoard,onChange:function onChange(event){return setTypeOfBoards(event.target.value);}})),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\",id:\"CreateBoard\",className:style.CreateButton,disabled:formComplete},\"create\")));};// class CreateBoard extends Component {\n//     constructor(props){\n//         super(props);\n//         this.NameOfboard = React.createRef();\n//         this.TeamMember = React.createRef();\n//         this.TypeOfBoard = React.createRef();\n//         this.currentUser = useContext(AuthContext);\n//         this.userId = currentUser.uid;\n//     }\n//     state = {\n//         formComplete : false,\n//         formIncompleteError : false,\n//         selectedBoard : {}\n//     }\n//     componentDidMount() {\n//         Axios.get(`https://pro-organiser-app.firebaseio.com/boardContents/${userId}.json`)\n//             .then(response => {\n//                 console.log(response);\n//                 this.setState({\n//                     boardContents: response.data\n//                 })\n//             })\n//             .catch(error => {console.log(error)});\n//     }\n//     addBoardToDBHandler = (event) => {\n//         event.preventDefault();\n//         if(this.NameOfboard.current.value.length === 0 || this.TeamMember.current.value.length === 0 || this.TypeOfBoard.current.value.length === 0){\n//             this.setState({\n//                 formComplete : false,\n//                 formIncompleteError : true\n//             })\n//         }else{\n//             let selectedBoard = {...this.state.selectedBoard}\n//             selectedBoard.boardName = this.NameOfboard.current.value;\n//             selectedBoard.members = this.TeamMember.current.value;\n//             selectedBoard.boardType = this.TypeOfBoard.current.value;\n//             Axios.post('https://pro-organiser-app.firebaseio.com/boardContents.json', selectedBoard)\n//                 .then(response => {\n//                     alert(\"Board added succesfully\");\n//                                    this.props.history.push('/');\n//                         }).catch(error => {console.log(error)});\n//                     }\n//                 }\n//     render() {\n//     return (\n//         <div className={style.CreateMain}>\n//             {this.state.formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding the Board</p> : null}\n//             <div className={style.CreateTitle}>\n//             <span>Create a Board</span>\n//             </div>\n//             <form onSubmit={this.addBoardToDBHandler}>\n//             <label>\n//                 <div className={style.Createlable}>Enter a name of your board:</div>\n//                 <input id=\"name\" type=\"text\" name=\"name\" placeholder=\"eg Agile Sprint Board\" ref={this.NameOfboard} />\n//             </label>\n//             <label>\n//                 <div className={style.Createlable}>Add your team members:</div>\n//                 <input id=\"team\" type=\"text\" name=\"team\" placeholder=\"Add your team (separated by commas)\" ref={this.TeamMember} />\n//             </label>\n//             <label>\n//                 <div className={style.Createlable}>Enter the type of your board:</div>\n//                 <input id=\"type\" type=\"text\" name=\"type\" placeholder=\"eg Design UX\" ref={this.TypeOfBoard} />\n//             </label>\n//             <button type=\"submit\" id=\"CreateBoard\" className={style.CreateButton} disabled={this.state.formComplete}>create</button>\n//             </form>\n//         </div>\n//     );\n// }\n// }\nexport default withRouter(CreateBoard);","map":{"version":3,"sources":["/home/wws/pro-organiser-application/src/pages/CreateBoard/CreateBoard.js"],"names":["React","useState","useEffect","useContext","Axios","style","AuthContext","withRouter","useHistory","CreateBoard","props","currentUser","formComplete","setFormComplete","formIncompleteError","setFormIncompleteError","isBoardAdded","setIsBoardAdded","nameOfboards","setNameOfboards","teamMembers","setTeamMembers","typeOfBoards","setTypeOfBoards","NameOfboard","useRef","TeamMember","TypeOfBoard","userId","uid","history","addBoardToDBHandler","event","preventDefault","current","value","length","post","boardName","boardType","members","then","response","alert","push","catch","error","console","log","CreateMain","color","CreateTitle","Createlable","target","CreateButton"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport Axios from 'axios';\nimport style from './CreateBoard.module.css';\nimport { AuthContext } from '../../context/Auth';\nimport { withRouter, useHistory } from \"react-router-dom\";\n\nconst CreateBoard = (props) => {\n    const { currentUser } = useContext(AuthContext);\n\n    const [formComplete, setFormComplete] = useState(false);\n    const [formIncompleteError, setFormIncompleteError] = useState(false);\n    const [isBoardAdded, setIsBoardAdded] = useState(false);\n\n    const [nameOfboards, setNameOfboards] = useState(\"\");\n    const [teamMembers, setTeamMembers] = useState(\"\");\n    const [typeOfBoards, setTypeOfBoards] = useState(\"\");\n\n\n    const NameOfboard  = React.useRef();\n    const TeamMember  = React.useRef();\n    const TypeOfBoard  = React.useRef();\n\n    const userId = currentUser.uid;\n\n    // to use history function\n    const history = useHistory();\n\n    useEffect(() => {\n        setIsBoardAdded(false);\n      }, [isBoardAdded]);\n\n    \n    const addBoardToDBHandler = (event) => {\n        event.preventDefault();\n        if(NameOfboard.current.value.length === 0 || TeamMember.current.value.length === 0 || TypeOfBoard.current.value.length === 0){\n        setFormComplete(false);\n        setFormIncompleteError(true);\n        } else {\n        // add column name in firebase\n        Axios.post(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents.json`, {\n            boardName: nameOfboards,\n            boardType: typeOfBoards,\n            members: teamMembers,\n            \n            \n        })\n            .then((response) => {\n                alert(\"Board added succesfully\");\n                history.push(\"/\");\n                setIsBoardAdded(true);\n            })\n            .catch((error) => console.log(error));\n\n        }\n    };\n\n    return(\n\n        <div className={style.CreateMain}>\n        {formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding the Board</p> : null}\n        <div className={style.CreateTitle}>\n        <span>Create a Board</span>\n        </div>\n      \n        <form onSubmit={addBoardToDBHandler}>\n        <label>\n            <div className={style.Createlable}>Enter a name of your board:</div>\n            <input id=\"name\" type=\"text\" name=\"name\" placeholder=\"eg Agile Sprint Board\" ref={NameOfboard}  onChange={(event) => setNameOfboards(event.target.value)}/>\n        </label>\n        <label>\n            <div className={style.Createlable}>Add your team members:</div>\n            <input id=\"team\" type=\"text\" name=\"team\" placeholder=\"Add your team (separated by commas)\" ref={TeamMember}  onChange={(event) => setTeamMembers(event.target.value)}/>\n        </label>\n        <label>\n            <div className={style.Createlable}>Enter the type of your board:</div>\n            <input id=\"type\" type=\"text\" name=\"type\" placeholder=\"eg Design UX\" ref={TypeOfBoard}  onChange={(event) => setTypeOfBoards(event.target.value)}/>\n        </label>\n        <button type=\"submit\" id=\"CreateBoard\" className={style.CreateButton} disabled={formComplete}>create</button>\n        </form>\n    </div>\n\n    );\n\n}\n\n\n// class CreateBoard extends Component {\n//     constructor(props){\n//         super(props);\n//         this.NameOfboard = React.createRef();\n//         this.TeamMember = React.createRef();\n//         this.TypeOfBoard = React.createRef();\n\n//         this.currentUser = useContext(AuthContext);\n//         this.userId = currentUser.uid;\n//     }\n    \n//     state = {\n    \n//         formComplete : false,\n//         formIncompleteError : false,\n//         selectedBoard : {}\n//     }\n\n\n//     componentDidMount() {\n//         Axios.get(`https://pro-organiser-app.firebaseio.com/boardContents/${userId}.json`)\n//             .then(response => {\n//                 console.log(response);\n//                 this.setState({\n//                     boardContents: response.data\n//                 })\n//             })\n//             .catch(error => {console.log(error)});\n//     }\n\n//     addBoardToDBHandler = (event) => {\n//         event.preventDefault();\n//         if(this.NameOfboard.current.value.length === 0 || this.TeamMember.current.value.length === 0 || this.TypeOfBoard.current.value.length === 0){\n//             this.setState({\n//                 formComplete : false,\n//                 formIncompleteError : true\n//             })\n//         }else{\n//             let selectedBoard = {...this.state.selectedBoard}\n//             selectedBoard.boardName = this.NameOfboard.current.value;\n//             selectedBoard.members = this.TeamMember.current.value;\n//             selectedBoard.boardType = this.TypeOfBoard.current.value;\n            \n//             Axios.post('https://pro-organiser-app.firebaseio.com/boardContents.json', selectedBoard)\n//                 .then(response => {\n//                     alert(\"Board added succesfully\");\n//                                    this.props.history.push('/');\n                                \n//                         }).catch(error => {console.log(error)});\n//                     }\n//                 }\n\n//     render() {\n//     return (\n//         <div className={style.CreateMain}>\n//             {this.state.formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding the Board</p> : null}\n//             <div className={style.CreateTitle}>\n//             <span>Create a Board</span>\n//             </div>\n          \n//             <form onSubmit={this.addBoardToDBHandler}>\n//             <label>\n//                 <div className={style.Createlable}>Enter a name of your board:</div>\n//                 <input id=\"name\" type=\"text\" name=\"name\" placeholder=\"eg Agile Sprint Board\" ref={this.NameOfboard} />\n//             </label>\n//             <label>\n//                 <div className={style.Createlable}>Add your team members:</div>\n//                 <input id=\"team\" type=\"text\" name=\"team\" placeholder=\"Add your team (separated by commas)\" ref={this.TeamMember} />\n//             </label>\n//             <label>\n//                 <div className={style.Createlable}>Enter the type of your board:</div>\n//                 <input id=\"type\" type=\"text\" name=\"type\" placeholder=\"eg Design UX\" ref={this.TypeOfBoard} />\n//             </label>\n//             <button type=\"submit\" id=\"CreateBoard\" className={style.CreateButton} disabled={this.state.formComplete}>create</button>\n//             </form>\n//         </div>\n//     );\n// }\n// }\n\nexport default withRouter(CreateBoard);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/wws/pro-organiser-application/src/pages/CreateBoard/CreateBoard.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport Axios from 'axios';\nimport style from './CreateBoard.module.css';\nimport { AuthContext } from '../../context/Auth';\nimport { withRouter, useHistory } from \"react-router-dom\";\n\nconst CreateBoard = props => {\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const [formComplete, setFormComplete] = useState(false);\n  const [formIncompleteError, setFormIncompleteError] = useState(false);\n  const [isBoardAdded, setIsBoardAdded] = useState(false);\n  const [nameOfboards, setNameOfboards] = useState(\"\");\n  const [teamMembers, setTeamMembers] = useState(\"\");\n  const [typeOfBoards, setTypeOfBoards] = useState(\"\");\n  const NameOfboard = React.useRef();\n  const TeamMember = React.useRef();\n  const TypeOfBoard = React.useRef();\n  const userId = currentUser.uid; // to use history function\n\n  const history = useHistory();\n  useEffect(() => {\n    setIsBoardAdded(false);\n  }, [isBoardAdded]);\n\n  const addBoardToDBHandler = event => {\n    event.preventDefault();\n\n    if (NameOfboard.current.value.length === 0 || TeamMember.current.value.length === 0 || TypeOfBoard.current.value.length === 0) {\n      setFormComplete(false);\n      setFormIncompleteError(true);\n    } else {\n      // add column name in firebase\n      Axios.post(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents.json`, {\n        boardName: nameOfboards,\n        boardType: typeOfBoards,\n        members: teamMembers\n      }).then(response => {\n        alert(\"Board added succesfully\");\n        history.push(\"/\");\n        setIsBoardAdded(true);\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: style.CreateMain,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, formIncompleteError ? /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 32\n    }\n  }, \"Kindly complete the form before adding the Board\") : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.CreateTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"Create a Board\")), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: addBoardToDBHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.Createlable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"Enter a name of your board:\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"name\",\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"eg Agile Sprint Board\",\n    ref: NameOfboard,\n    onChange: event => setNameOfboards(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.Createlable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \"Add your team members:\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"team\",\n    type: \"text\",\n    name: \"team\",\n    placeholder: \"Add your team (separated by commas)\",\n    ref: TeamMember,\n    onChange: event => setTeamMembers(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.Createlable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, \"Enter the type of your board:\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"type\",\n    type: \"text\",\n    name: \"type\",\n    placeholder: \"eg Design UX\",\n    ref: TypeOfBoard,\n    onChange: event => setTypeOfBoards(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    id: \"CreateBoard\",\n    className: style.CreateButton,\n    disabled: formComplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"create\")));\n}; // class CreateBoard extends Component {\n//     constructor(props){\n//         super(props);\n//         this.NameOfboard = React.createRef();\n//         this.TeamMember = React.createRef();\n//         this.TypeOfBoard = React.createRef();\n//         this.currentUser = useContext(AuthContext);\n//         this.userId = currentUser.uid;\n//     }\n//     state = {\n//         formComplete : false,\n//         formIncompleteError : false,\n//         selectedBoard : {}\n//     }\n//     componentDidMount() {\n//         Axios.get(`https://pro-organiser-app.firebaseio.com/boardContents/${userId}.json`)\n//             .then(response => {\n//                 console.log(response);\n//                 this.setState({\n//                     boardContents: response.data\n//                 })\n//             })\n//             .catch(error => {console.log(error)});\n//     }\n//     addBoardToDBHandler = (event) => {\n//         event.preventDefault();\n//         if(this.NameOfboard.current.value.length === 0 || this.TeamMember.current.value.length === 0 || this.TypeOfBoard.current.value.length === 0){\n//             this.setState({\n//                 formComplete : false,\n//                 formIncompleteError : true\n//             })\n//         }else{\n//             let selectedBoard = {...this.state.selectedBoard}\n//             selectedBoard.boardName = this.NameOfboard.current.value;\n//             selectedBoard.members = this.TeamMember.current.value;\n//             selectedBoard.boardType = this.TypeOfBoard.current.value;\n//             Axios.post('https://pro-organiser-app.firebaseio.com/boardContents.json', selectedBoard)\n//                 .then(response => {\n//                     alert(\"Board added succesfully\");\n//                                    this.props.history.push('/');\n//                         }).catch(error => {console.log(error)});\n//                     }\n//                 }\n//     render() {\n//     return (\n//         <div className={style.CreateMain}>\n//             {this.state.formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding the Board</p> : null}\n//             <div className={style.CreateTitle}>\n//             <span>Create a Board</span>\n//             </div>\n//             <form onSubmit={this.addBoardToDBHandler}>\n//             <label>\n//                 <div className={style.Createlable}>Enter a name of your board:</div>\n//                 <input id=\"name\" type=\"text\" name=\"name\" placeholder=\"eg Agile Sprint Board\" ref={this.NameOfboard} />\n//             </label>\n//             <label>\n//                 <div className={style.Createlable}>Add your team members:</div>\n//                 <input id=\"team\" type=\"text\" name=\"team\" placeholder=\"Add your team (separated by commas)\" ref={this.TeamMember} />\n//             </label>\n//             <label>\n//                 <div className={style.Createlable}>Enter the type of your board:</div>\n//                 <input id=\"type\" type=\"text\" name=\"type\" placeholder=\"eg Design UX\" ref={this.TypeOfBoard} />\n//             </label>\n//             <button type=\"submit\" id=\"CreateBoard\" className={style.CreateButton} disabled={this.state.formComplete}>create</button>\n//             </form>\n//         </div>\n//     );\n// }\n// }\n\n\nexport default withRouter(CreateBoard);","map":{"version":3,"sources":["/home/wws/pro-organiser-application/src/pages/CreateBoard/CreateBoard.js"],"names":["React","useState","useEffect","useContext","Axios","style","AuthContext","withRouter","useHistory","CreateBoard","props","currentUser","formComplete","setFormComplete","formIncompleteError","setFormIncompleteError","isBoardAdded","setIsBoardAdded","nameOfboards","setNameOfboards","teamMembers","setTeamMembers","typeOfBoards","setTypeOfBoards","NameOfboard","useRef","TeamMember","TypeOfBoard","userId","uid","history","addBoardToDBHandler","event","preventDefault","current","value","length","post","boardName","boardType","members","then","response","alert","push","catch","error","console","log","CreateMain","color","CreateTitle","Createlable","target","CreateButton"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport Axios from 'axios';\nimport style from './CreateBoard.module.css';\nimport { AuthContext } from '../../context/Auth';\nimport { withRouter, useHistory } from \"react-router-dom\";\n\nconst CreateBoard = (props) => {\n    const { currentUser } = useContext(AuthContext);\n\n    const [formComplete, setFormComplete] = useState(false);\n    const [formIncompleteError, setFormIncompleteError] = useState(false);\n    const [isBoardAdded, setIsBoardAdded] = useState(false);\n\n    const [nameOfboards, setNameOfboards] = useState(\"\");\n    const [teamMembers, setTeamMembers] = useState(\"\");\n    const [typeOfBoards, setTypeOfBoards] = useState(\"\");\n\n\n    const NameOfboard  = React.useRef();\n    const TeamMember  = React.useRef();\n    const TypeOfBoard  = React.useRef();\n\n    const userId = currentUser.uid;\n\n    // to use history function\n    const history = useHistory();\n\n    useEffect(() => {\n        setIsBoardAdded(false);\n      }, [isBoardAdded]);\n\n    \n    const addBoardToDBHandler = (event) => {\n        event.preventDefault();\n        if(NameOfboard.current.value.length === 0 || TeamMember.current.value.length === 0 || TypeOfBoard.current.value.length === 0){\n        setFormComplete(false);\n        setFormIncompleteError(true);\n        } else {\n        // add column name in firebase\n        Axios.post(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents.json`, {\n            boardName: nameOfboards,\n            boardType: typeOfBoards,\n            members: teamMembers,\n            \n            \n        })\n            .then((response) => {\n                alert(\"Board added succesfully\");\n                history.push(\"/\");\n                setIsBoardAdded(true);\n            })\n            .catch((error) => console.log(error));\n\n        }\n    };\n\n    return(\n\n        <div className={style.CreateMain}>\n        {formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding the Board</p> : null}\n        <div className={style.CreateTitle}>\n        <span>Create a Board</span>\n        </div>\n      \n        <form onSubmit={addBoardToDBHandler}>\n        <label>\n            <div className={style.Createlable}>Enter a name of your board:</div>\n            <input id=\"name\" type=\"text\" name=\"name\" placeholder=\"eg Agile Sprint Board\" ref={NameOfboard}  onChange={(event) => setNameOfboards(event.target.value)}/>\n        </label>\n        <label>\n            <div className={style.Createlable}>Add your team members:</div>\n            <input id=\"team\" type=\"text\" name=\"team\" placeholder=\"Add your team (separated by commas)\" ref={TeamMember}  onChange={(event) => setTeamMembers(event.target.value)}/>\n        </label>\n        <label>\n            <div className={style.Createlable}>Enter the type of your board:</div>\n            <input id=\"type\" type=\"text\" name=\"type\" placeholder=\"eg Design UX\" ref={TypeOfBoard}  onChange={(event) => setTypeOfBoards(event.target.value)}/>\n        </label>\n        <button type=\"submit\" id=\"CreateBoard\" className={style.CreateButton} disabled={formComplete}>create</button>\n        </form>\n    </div>\n\n    );\n\n}\n\n\n// class CreateBoard extends Component {\n//     constructor(props){\n//         super(props);\n//         this.NameOfboard = React.createRef();\n//         this.TeamMember = React.createRef();\n//         this.TypeOfBoard = React.createRef();\n\n//         this.currentUser = useContext(AuthContext);\n//         this.userId = currentUser.uid;\n//     }\n    \n//     state = {\n    \n//         formComplete : false,\n//         formIncompleteError : false,\n//         selectedBoard : {}\n//     }\n\n\n//     componentDidMount() {\n//         Axios.get(`https://pro-organiser-app.firebaseio.com/boardContents/${userId}.json`)\n//             .then(response => {\n//                 console.log(response);\n//                 this.setState({\n//                     boardContents: response.data\n//                 })\n//             })\n//             .catch(error => {console.log(error)});\n//     }\n\n//     addBoardToDBHandler = (event) => {\n//         event.preventDefault();\n//         if(this.NameOfboard.current.value.length === 0 || this.TeamMember.current.value.length === 0 || this.TypeOfBoard.current.value.length === 0){\n//             this.setState({\n//                 formComplete : false,\n//                 formIncompleteError : true\n//             })\n//         }else{\n//             let selectedBoard = {...this.state.selectedBoard}\n//             selectedBoard.boardName = this.NameOfboard.current.value;\n//             selectedBoard.members = this.TeamMember.current.value;\n//             selectedBoard.boardType = this.TypeOfBoard.current.value;\n            \n//             Axios.post('https://pro-organiser-app.firebaseio.com/boardContents.json', selectedBoard)\n//                 .then(response => {\n//                     alert(\"Board added succesfully\");\n//                                    this.props.history.push('/');\n                                \n//                         }).catch(error => {console.log(error)});\n//                     }\n//                 }\n\n//     render() {\n//     return (\n//         <div className={style.CreateMain}>\n//             {this.state.formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding the Board</p> : null}\n//             <div className={style.CreateTitle}>\n//             <span>Create a Board</span>\n//             </div>\n          \n//             <form onSubmit={this.addBoardToDBHandler}>\n//             <label>\n//                 <div className={style.Createlable}>Enter a name of your board:</div>\n//                 <input id=\"name\" type=\"text\" name=\"name\" placeholder=\"eg Agile Sprint Board\" ref={this.NameOfboard} />\n//             </label>\n//             <label>\n//                 <div className={style.Createlable}>Add your team members:</div>\n//                 <input id=\"team\" type=\"text\" name=\"team\" placeholder=\"Add your team (separated by commas)\" ref={this.TeamMember} />\n//             </label>\n//             <label>\n//                 <div className={style.Createlable}>Enter the type of your board:</div>\n//                 <input id=\"type\" type=\"text\" name=\"type\" placeholder=\"eg Design UX\" ref={this.TypeOfBoard} />\n//             </label>\n//             <button type=\"submit\" id=\"CreateBoard\" className={style.CreateButton} disabled={this.state.formComplete}>create</button>\n//             </form>\n//         </div>\n//     );\n// }\n// }\n\nexport default withRouter(CreateBoard);\n"]},"metadata":{},"sourceType":"module"}
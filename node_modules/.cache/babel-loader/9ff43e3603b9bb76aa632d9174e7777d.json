{"ast":null,"code":"import _slicedToArray from\"/home/wws/Desktop/pro-organiser-application/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import style from\"./AddColumn.module.css\";import Modal from'./../../common/Modal/Modal';import Axios from\"axios\";function AddColumn(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),showModal=_useState2[0],setShowModal=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),columnName=_useState4[0],setColumnName=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),formComplete=_useState6[0],setFormComplete=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),formIncompleteError=_useState8[0],setFormIncompleteError=_useState8[1];var columnNames=React.useRef();useEffect(function(){modalOpenHandler();},[showModal]);var modalOpenHandler=function modalOpenHandler(){var colBox=document.getElementById(\"addColumnBox\");colBox.addEventListener(\"click\",function(){setShowModal(true);});};var handleAddColumnClick=function handleAddColumnClick(event){// event.preventDefault();\nif(columnNames.current.value.length===0){setFormComplete(false);setFormIncompleteError(true);}else{// add column name in firebase\nAxios.post(\"https://pro-organiser-app.firebaseio.com/boardContents/\".concat(props.boardId,\"/column.json\"),{name:columnName}).then(function(response){alert(\"column added succesfully\");props.setShowColumn(true);}).catch(function(err){return console.log(err);});setShowModal(false);}};var modalCloseHandler=function modalCloseHandler(){setShowModal(false);};var modalContent=showModal?/*#__PURE__*/React.createElement(React.Fragment,null,formIncompleteError?/*#__PURE__*/React.createElement(\"p\",{style:{color:'red'}},\"Kindly complete the form before adding Column\"):null,/*#__PURE__*/React.createElement(\"div\",{className:style.AddColumnForm},/*#__PURE__*/React.createElement(\"h2\",null,\"Add a Column\"),/*#__PURE__*/React.createElement(\"div\",{className:style.FormInput},/*#__PURE__*/React.createElement(\"span\",{className:style.Lable},\"Enter a column name:\"),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",id:\"column_name\",value:columnName,placeholder:\"Enter a column name\",ref:columnNames,onChange:function onChange(e){return setColumnName(e.target.value);}}))),/*#__PURE__*/React.createElement(\"button\",{className:style.AddButton,id:\"CreateColumn\",disabled:formComplete,onClick:handleAddColumnClick},\"Add Column\")):null;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:style.addColumnBox,id:\"addColumnBox\"},/*#__PURE__*/React.createElement(\"div\",null,\"Add a Column\")),/*#__PURE__*/React.createElement(\"br\",null),showModal&&/*#__PURE__*/React.createElement(Modal,{content:modalContent,close:modalCloseHandler}));}export default AddColumn;","map":{"version":3,"sources":["/home/wws/Desktop/pro-organiser-application/src/components/addColumn/AddColumn.js"],"names":["React","useState","useEffect","style","Modal","Axios","AddColumn","props","showModal","setShowModal","columnName","setColumnName","formComplete","setFormComplete","formIncompleteError","setFormIncompleteError","columnNames","useRef","modalOpenHandler","colBox","document","getElementById","addEventListener","handleAddColumnClick","event","current","value","length","post","boardId","name","then","response","alert","setShowColumn","catch","err","console","log","modalCloseHandler","modalContent","color","AddColumnForm","FormInput","Lable","e","target","AddButton","addColumnBox"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport style from \"./AddColumn.module.css\";\nimport Modal from './../../common/Modal/Modal';\nimport Axios from \"axios\";\n\nfunction AddColumn(props) {\n  const [showModal, setShowModal] = useState(false);\n  const [columnName, setColumnName] = useState(\"\");\n  const [formComplete, setFormComplete] = useState(false);\n  const [formIncompleteError, setFormIncompleteError] = useState(false);\n\n  const columnNames  = React.useRef();\n\n  useEffect(() => {\n    modalOpenHandler();\n  }, [showModal]);\n\n  const modalOpenHandler = () => {\n    let colBox = document.getElementById(\"addColumnBox\");\n    colBox.addEventListener(\"click\", () => {\n      setShowModal(true);\n    });\n  };\n\n  const handleAddColumnClick = (event) => {\n    // event.preventDefault();\n        if(columnNames.current.value.length === 0){\n          setFormComplete(false);\n          setFormIncompleteError(true);\n    } else {\n      // add column name in firebase\n      Axios.post(`https://pro-organiser-app.firebaseio.com/boardContents/${props.boardId}/column.json`, {\n        name: columnName,\n      })\n        .then((response) => {\n          alert(\"column added succesfully\");\n          props.setShowColumn(true);\n        })\n        .catch((err) => console.log(err));\n\n      setShowModal(false);\n    }\n  };\n\n\n  const  modalCloseHandler = () => {setShowModal(false)};\n\n  let modalContent = showModal ? \n\n  (\n      <>\n      {formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding Column</p> : null}\n      <div className={style.AddColumnForm}>\n        <h2>Add a Column</h2>\n       <div className={style.FormInput}><span className={style.Lable}>Enter a column name:</span><input type=\"text\" id=\"column_name\" value={columnName} placeholder=\"Enter a column name\" ref={columnNames} onChange={(e) => setColumnName(e.target.value)}/></div>\n      </div>\n      <button className={style.AddButton} id=\"CreateColumn\" disabled={formComplete} onClick={handleAddColumnClick}>Add Column</button>\n      </>\n  )\n  :null;\n\n  return (\n    <div>\n       <div className={style.addColumnBox} id=\"addColumnBox\">\n        <div>Add a Column</div>\n      </div>\n        <br />\n        {showModal && (\n        \n            <Modal  \n                content = {modalContent}\n                close = {modalCloseHandler}/> \n        )}\n       \n    </div>\n)\n}\n\nexport default AddColumn;\n"]},"metadata":{},"sourceType":"module"}
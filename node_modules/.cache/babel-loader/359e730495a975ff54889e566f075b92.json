{"ast":null,"code":"var _jsxFileName = \"/home/wws/Desktop/pro-organiser-application/src/components/card/Card.js\";\nimport React, { useState, useEffect } from \"react\";\nimport style from \"./Card.module.css\";\nimport Modal from './../../common/Modal/Modal';\nimport Axios from \"axios\";\n\nfunction Card(props) {\n  const [showModal, setShowModal] = useState(false);\n  const {\n    members,\n    columnId,\n    boardId,\n    boardTitle,\n    isCardDragged\n  } = props;\n  const [cardData, setCardData] = useState(\"\");\n  const [cardTitle, setCardTitle] = useState(\"\");\n  const [team, setTeam] = useState([]);\n  const [descrptn, setDescrptn] = useState(\"\");\n  const [dueDate, setDueDate] = useState(\"\");\n  const [formComplete, setFormComplete] = useState(false);\n  const [formIncompleteError, setFormIncompleteError] = useState(false); // to split members list string into array\n\n  const memberArr = members.split(\",\");\n  const AddCard = React.useRef();\n  useEffect(() => {\n    // modalOpenHandler();\n    getCardData();\n  }, [showModal]);\n\n  const getCardData = () => {\n    Axios.get(`https://pro-organiser-app.firebaseio.com/boardContents/${boardId}/column/${columnId}/card.json`).then(response => {\n      setCardData(response.data);\n    }).catch(error => console.log(error));\n  };\n\n  const handleAddCardClick = event => {\n    event.preventDefault();\n\n    if (AddCard.current.value.length === 0) {\n      setFormComplete(false);\n      setFormIncompleteError(true);\n    } else {\n      // add column name in firebase\n      Axios.post(`https://pro-organiser-app.firebaseio.com/boardContents/${props.boardId}/column.json`, {\n        name: cardTitle\n      }).then(response => {\n        alert(\"column added succesfully\");\n        props.setShowColumn(true);\n      }).catch(err => console.log(err));\n      setShowModal(false);\n    }\n  };\n\n  const onSelectChange = e => {\n    const values = [...e.target.selectedOptions].map(opt => opt.value);\n    setTeam(values);\n  };\n\n  const modalCloseHandler = () => {\n    setShowModal(false);\n  };\n\n  let modalContent = showModal ? /*#__PURE__*/React.createElement(React.Fragment, null, formIncompleteError ? /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 30\n    }\n  }, \"Kindly complete the form before adding Card\") : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.AddCardForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Add a Card\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: style.FormInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: style.Lable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 41\n    }\n  }, \"Enter a title for your task:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"title\",\n    defaultValue: editDetails ? cardName : \"\",\n    placeholder: \"e.g. Add a new icon\",\n    onChange: e => setCardTitle(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 106\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: style.FormInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: style.Lable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 41\n    }\n  }, \"Choose members for this task(select multiple,if needed):\"), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"membersList\",\n    name: \"membersList\",\n    defaultValue: editDetails ? teamDetail : \"\",\n    multiple: true,\n    onChange: onSelectChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 134\n    }\n  }, memberArr.map(item => /*#__PURE__*/React.createElement(\"option\", {\n    value: item,\n    key: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 285\n    }\n  }, item)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: style.FormInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: style.Lable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 41\n    }\n  }, \"Add the description for your task:\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"description\",\n    type: \"text\",\n    defaultValue: editDetails ? descDetails : \"\",\n    placeholder: \"Add your description here\",\n    onChange: e => setDescrptn(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 112\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: style.FormInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: style.Lable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 41\n    }\n  }, \"Select the due-date for this task:\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"due_date\",\n    type: \"date\",\n    min: date,\n    defaultValue: editDetails ? dateDetails : \"\",\n    onChange: e => setDueDate(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 112\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    className: style.AddButton,\n    id: \"CreateColumn\",\n    disabled: formComplete,\n    onClick: handleAddCardClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, \"Add Column\")) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.CardData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, cardData && Object.entries(cardData).map(item => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.CardInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.CardHeader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.CardName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, item[1].cardTitle)), /*#__PURE__*/React.createElement(\"div\", {\n    className: style.CardIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 16\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: style.CardBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: style.AddCardBtn,\n    onClick: () => setShowModal(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, \"Add a Card\"))))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }), showModal && /*#__PURE__*/React.createElement(Modal, {\n    content: modalContent,\n    close: modalCloseHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Card;","map":{"version":3,"sources":["/home/wws/Desktop/pro-organiser-application/src/components/card/Card.js"],"names":["React","useState","useEffect","style","Modal","Axios","Card","props","showModal","setShowModal","members","columnId","boardId","boardTitle","isCardDragged","cardData","setCardData","cardTitle","setCardTitle","team","setTeam","descrptn","setDescrptn","dueDate","setDueDate","formComplete","setFormComplete","formIncompleteError","setFormIncompleteError","memberArr","split","AddCard","useRef","getCardData","get","then","response","data","catch","error","console","log","handleAddCardClick","event","preventDefault","current","value","length","post","name","alert","setShowColumn","err","onSelectChange","e","values","target","selectedOptions","map","opt","modalCloseHandler","modalContent","color","AddCardForm","FormInput","Lable","editDetails","cardName","teamDetail","item","descDetails","date","dateDetails","AddButton","CardData","Object","entries","CardInfo","CardHeader","CardName","CardIcon","CardBtn","AddCardBtn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport style from \"./Card.module.css\";\nimport Modal from './../../common/Modal/Modal';\nimport Axios from \"axios\";\n\nfunction Card(props) {\n  const [showModal, setShowModal] = useState(false);\n  const { members, columnId, boardId, boardTitle, isCardDragged } = props;\n  const [cardData, setCardData] = useState(\"\");\n\n  const [cardTitle, setCardTitle] = useState(\"\");\n  const [team, setTeam] = useState([]);\n  const [descrptn, setDescrptn] = useState(\"\");\n  const [dueDate, setDueDate] = useState(\"\");\n\n  const [formComplete, setFormComplete] = useState(false);\n  const [formIncompleteError, setFormIncompleteError] = useState(false);\n\n    // to split members list string into array\n    const memberArr = members.split(\",\");\n\n  const AddCard = React.useRef();\n\n  useEffect(() => {\n    // modalOpenHandler();\n    getCardData();\n  }, [showModal]);\n\n\n  const getCardData = () => {\n    Axios\n    .get(`https://pro-organiser-app.firebaseio.com/boardContents/${boardId}/column/${columnId}/card.json`)\n    .then((response) => {\n        setCardData(response.data);\n    })\n    .catch((error) => console.log(error));\n};\n\n  const handleAddCardClick = (event) => {\n    event.preventDefault();\n        if(AddCard.current.value.length === 0){\n          setFormComplete(false);\n          setFormIncompleteError(true);\n    } else {\n      // add column name in firebase\n      Axios.post(`https://pro-organiser-app.firebaseio.com/boardContents/${props.boardId}/column.json`, {\n        name: cardTitle,\n      })\n        .then((response) => {\n          alert(\"column added succesfully\");\n          props.setShowColumn(true);\n        })\n        .catch((err) => console.log(err));\n\n      setShowModal(false);\n    }\n  };\n\n  const onSelectChange = (e) => {\n    const values = [...e.target.selectedOptions].map((opt) => opt.value);\n    setTeam(values);\n  };\n\n  const  modalCloseHandler = () => {setShowModal(false)};\n\n  let modalContent = showModal ? \n\n  (\n      <>\n      {formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding Card</p> : null}\n      <div className={style.AddCardForm}>\n        <h2>Add a Card</h2>\n       <div className={style.FormInput}><span className={style.Lable}>Enter a title for your task:</span><input type=\"text\" id=\"title\" defaultValue={editDetails ? cardName : \"\"} placeholder=\"e.g. Add a new icon\" onChange={(e) => setCardTitle(e.target.value)}/></div>\n       <div className={style.FormInput}><span className={style.Lable}>Choose members for this task(select multiple,if needed):</span><select  id=\"membersList\" name=\"membersList\" defaultValue={editDetails ? teamDetail : \"\"} multiple onChange={onSelectChange}>{memberArr.map((item) => (<option value={item} key={item}>{item}</option>))}</select></div>\n       <div className={style.FormInput}><span className={style.Lable}>Add the description for your task:</span><input id=\"description\" type=\"text\"  defaultValue={editDetails ? descDetails : \"\"} placeholder=\"Add your description here\"  onChange={(e) => setDescrptn(e.target.value)}/></div>\n       <div className={style.FormInput}><span className={style.Lable}>Select the due-date for this task:</span><input id=\"due_date\" type=\"date\" min={date} defaultValue={editDetails ? dateDetails : \"\"} onChange={(e) => setDueDate(e.target.value)}/></div>\n      </div>\n      <button className={style.AddButton} id=\"CreateColumn\" disabled={formComplete} onClick={handleAddCardClick}>Add Column</button>\n      </>\n  )\n  :null;\n\n  return (\n    <div>\n      <div className={style.CardData}>\n      {cardData &&\n        Object.entries(cardData).map((item) => (\n          <>\n          <div className={style.CardInfo}>\n          <div className={style.CardHeader}>\n          <div className={style.CardName}>{item[1].cardTitle}</div>\n          </div>\n          <div className={style.CardIcon}>\n          <div><i className=\"fas fa-list\"></i></div>\n          </div>\n          </div>\n          <div className={style.CardBtn}>\n            <button className={style.AddCardBtn} onClick={() => setShowModal(true)}>Add a Card</button>\n          </div>\n          </>\n         ) )}\n      </div>\n        <br />\n        {showModal && (\n        \n            <Modal  \n                content = {modalContent}\n                close = {modalCloseHandler}/> \n        )}\n       \n    </div>\n)\n}\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}